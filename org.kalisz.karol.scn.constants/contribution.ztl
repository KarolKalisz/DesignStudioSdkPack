/**
 * Copyright 2014 Karol Kalisz
 * 
 * Original Source Code Location:
 *  https://github.com/KarolKalisz/DesignStudioSdkPack
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

/**
	Holder for Key, Label, Value. You can access the content as in below example.
	<br>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	
	// a loop for all entries<br>
	// content is of type org.scn.pack.KeyLabelValueArray<br>
	content.forEach(function(element, index) {<br>
	
		// element is of type org.scn.pack.KeyLabelValue<br>
		var elKey = element.key;<br>
		var elLabel = element.label;<br>
	 	var elValue = "( " + element.value + " )");<br>
	});
*/
class org.scn.pack.KeyLabelValue {
  String key;
  String label;
  float value;
}

/**
	Array for org.scn.pack.KeyLabelValue. You can use this array as in below example.
	<br>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	// content is of type org.scn.pack.KeyLabelValueArray<br>
	content.forEach(function(element, index) {<br>
	
		// element is of type org.scn.pack.KeyLabelValue<br>
		var elKey = element.key;<br>
		var elLabel = element.label;<br>
	 	var elValue = "( " + element.value + " )");<br>
	});
 */
class org.scn.pack.KeyLabelValueArray extends Array {
	org.scn.pack.KeyLabelValueArray (org.scn.pack.KeyLabelValue b);
}

/**
	Holder for value. You can use the content as in below example.
	<br>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	// content is of type org.scn.pack.StringArray<br>
	content.forEach(function(element, index) {<br>
	
		// element is of type org.scn.pack.String<br>
		var elValue = element.value;<br>
	});
*/
class org.scn.pack.String {
  String value;
}

/**
	Array for org.scn.pack.String. You can use this array as in below example.
	<br>
	var content = ARRAY_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	// content is of type org.scn.pack.StringArray<br>
	content.forEach(function(element, index) {<br>
	
		// element is of type org.scn.pack.String<br>
		var elValue = element.value;<br>
	});
*/
class org.scn.pack.StringArray extends Array {
	org.scn.pack.String (org.scn.pack.String b);
}

/** enum filed definition */
class org_scn_pack_SortDirectionEnumfield extends Enumfield {
       
}

/**
* A set of constants to specify sort direction
*/
class org_scn_pack_SortDirection extends Enum {

       /** ASCENDING */
	org_scn_pack_SortDirectionEnumfield ASCENDING;
       
       /** DESCENDING */
	org_scn_pack_SortDirectionEnumfield DESCENDING;
}


/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the discussion thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/12/design-studio-sdk--get-topbottom-n-rankings-with-a-little-less-code
 * 
 * Authors: Michael Howles, Karol Kalisz
 */
class org.kalisz.karol.scn.pack.Collection extends Component {  
	
	/**
	Returns the collection content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2" collection:
	<code>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label + "( " + element.value + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: k1; value: l1 ( 12.4 )</li>
		<li>key: k2; value: l2 ( 25.1 )</li>
		<li>key: k3; value: l3 ( 94.2 )</li></ul>
	</example>
	*/
	org.scn.pack.KeyLabelValueArray getAsKeyLabelValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": items[i].key, 
				"label": items[i].label,
				"value": items[i].value
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	Sets items of the array by 2 strings: for keys, labels, values. Optionally a given separator can be specified. This implementation of collection allows duplicate keys.
	Values must be float numbers. The content length is equal with number of keys. in case labels or values are shorter, correspondingly an empty label or 0.0 will be inserted. 
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	COLLECTION_1.setItems("k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setItems (
			/*keys*/ String keys, 
			/*labels*/ String labels, 
			/*values*/ String values,
			/*separator*/ optional String separator) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		var k = keys.split(separator);  
		var l = labels.split(separator);  
		var v = values.split(separator);
		
		while(k.length>l.length) l.push("");  
		while(k.length>v.length) v.push("0");

		for(var i=0; i<k.length; i++){
			var itemDef = {
				"key" : k[i],
				"label" : l[i],  
				"value" : v[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}  

	/**
	Adds a value to new or existing array. This implementation of collection allows duplicate keys. 
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	COLLECTION_1.addItem("k1", "l1", 45.75);<br>
	COLLECTION_1.addItem("k2", "l2", 11.21);<br>
	COLLECTION_1.addItem("k3", "l3", 85.439);<br>
	</code>
	This array has now following elements with keys: k1,k2,k3
	</example>
	*/
	void addItem (
			/*key*/ String key, 
			/*label*/ String label, 
			/*value*/ String value) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		var itemDef = {
			"key" : key,
			"label" : label,  
			"value" : value
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}

	/**
	Returns all keys as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with keys ["K1", "K2", "K3"]:
	<code>
	var keysAsString = COLLECTION_1.getKeys ("|");<br>
	</code>
	
	The "keysAsString" has now "K1|K2|K3" as content.
	</example>
	*/
	String getKeys(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);
		var a = [];
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].key);  
		}
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	Returns all labels as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with labels ["L1", "L2", "L3"]:
	<code>
	var labelsAsString = COLLECTION_1.getLabels ("|");<br>
	</code>
	
	The "labelsAsString" has now "L1|L2|L3" as content.
	</example>
	*/
	String getLabels(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].label);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with values ["11.4", "87.66", "147.41"]:
	<code>
	var valuesAsString = COLLECTION_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "11.4|87.66|147.41" as content.
	</example>
	*/
	String getValues(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByKey(optional org_scn_pack_SortDirectionEnumfield direction) {*
		if(direction == org_scn_pack_SortDirection.DESCENDING) {
			this.sortByKeyDescending();
			return;
		}
	
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.key>b.key;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by key (descending)
	 */
	void sortByKeyDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.key>a.key);  
		});  
		
		this.items = JSON.stringify(a);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByLabel(optional org_scn_pack_SortDirectionEnumfield direction) {*
		if(direction == org_scn_pack_SortDirection.DESCENDING) {
			this.sortByLabelDescending();
			return;
		}

		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.label>b.label;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  
		
	/**
	 * Sorts the collection by labels (descending)
	 */
	void sortByLabelDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.label>a.label);  
		});  
		
		this.items = JSON.stringify(a);  
	*}
		
	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByValue(optional org_scn_pack_SortDirectionEnumfield direction) {*
		if(direction == org_scn_pack_SortDirection.DESCENDING) {
			this.sortByValueDescending();
			return;
		}

		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newA-newB;  
		});
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by values (descending)
	 */
	void sortByValueDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newB-newA;  
		});
		
		this.items = JSON.stringify(a);  
	*}  
	
	/**
	 * Returns length of current collection
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns label by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with label "Value for Key 2" at index 1 and want to get value at index 1:
	<code>
	var label1 = COLLECTION_1.getLabelByIndex(1);<br>
	</code>
	Now "label1" is set to String "Value for Key 2".
	</example>
	*/
	String getLabelByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "N/A";
		
		if(a.length>index){  
			r = a[index].label;  
		}
		
		return r;  
	*}

	/**
	Returns label by given key. In case the key does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "Value for Key 2" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var label1 = COLLECTION_1.getLabelByKey("k2");<br>
	</code>
	Now "label1" is set to float "Value for Key 2".
	</example>
	*/
	String getLabelByKey( 
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "N/A";
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].label;
				break;
			}
		}
		
		return r;  
	*}

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndexAsString(1);<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByIndexAsString( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		if(a.length>index){  
			r = a[index].value;  
		}  
		
		return r;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = 0.0;  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}

	/**
	Returns value by given key. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKeyAsString("k2");<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByKeyAsString( 
			/* key */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}  

	/**
	Returns value by given key. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKey("k2");<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByKey(
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = 0.0;  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}
}

/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the blog thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/16/design-studio-sdk--bial-fornext-loop-and-my-first-github-co-author-attempt
 * 
 * Authors: Michael Howles, Karol Kalisz
 */
class org.kalisz.karol.scn.pack.Array extends Component {  
	
	/**
	Returns the array content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3" array:
	<code>
	var content = ARRAY_1.getValuesAsStringArray();<br>
	<br>
	// a loop for all values<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(""+ index, element.value + "( " + index + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: 0; value: k1 ( 0 )</li>
		<<li>key: 1; value: k2 ( 1 )</li>
		<li>key: 2; value: k3 ( 2 )</li></ul>
	</example>
	*/
	org.scn.pack.StringArray getValuesAsStringArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"value": items[i].value, 
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	Generates an array of integers for use in BIAL forEach statement in order to emulate a traditional for loop.
	<example>
	Fill a list box with 10 values:
	<code>ARRAY_1.eaches(0, 9, 1).forEach(function(element, index) {<br>
	LISTBOX_1.addItem(element, "Item " + (element + "") );<br>
	});</code>
	This would be equivalent to a loop in JavaScript:
	<code>
	for(var element = 0;element<=9;element++){<br>
		Your code here.<br>
	}
	</code>
	</example>
	*/
	Array eaches(/*Starting int*/ int start, /* Ending int */ int finish, /* Interval increment */int interval) {*
		var a = [];
		for(var i=start;i<=finish;i+=interval){
			a.push(i);
		}
		return a;
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 values ["v1", "v2", "v3"]:
	<code>
	var valuesAsString = ARRAY_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "v1|v2|v3" as content.
	</example>
	*/
	String getValues (
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}
	
	/**
	Creates an array of requested length with integers as values (starting at 0). 
	<example>
	You want an array with length 7:
	<code>
	ARRAY_1.createArray(7);<br>
	</code>
	This array has now following values: 0,1,2,3,4,5,6,7
	</example>
	*/
	void createArray (
			/**length*/ int lenght) {*
		var items = [];
			
		for(var i=0; i<lenght; i++){
			var itemDef = {
				"value" : "" + i
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}
	
	/**
	Sets values of the array by string. Optionally a given separator can be specified. This implementation of array allows duplicate keys.
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	ARRAY_1.setValues("k1;k2;k3", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setValues (
			/**values*/ String values,
			/**separator*/ optional String separator) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		var v = values.split(separator);
		
		for(var i=0; i<v.length; i++){
			var itemDef = {
				"value" : v[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}

	/**
	Adds a value to new or existing array. This implementation of array allows duplicate keys.
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	ARRAY_1.addValue("k1");<br>
	ARRAY_1.addValue("k2");<br>
	ARRAY_1.addValue("k3");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void addValue (
			/*value*/ String value) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		var itemDef = {
			"value" : value
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}
	
	/**
	 * Returns length of current array
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have an "k1,k2,k3" array and want to get value at index 1:
	<code>
	var value1 = ARRAY_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to "k2".
	</example>
	*/
	String getValueByIndex ( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = "N/A";  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}
}
