/**
 * Copyright 2014 Karol Kalisz
 * 
 * Original Source Code Location:
 *  https://github.com/KarolKalisz/DesignStudioSdkPack
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

/**
 * Class for NotificationBar
 */
class org.kalisz.karol.scn.pack.NotificationBar extends Component {

	/** 
	 * Add Category
	 * 
	 */
	void addCategory (
			/**Category Key*/String categoryKey, 
			/**Category Text*/String categoryText, 
			/**Category Image*/String categoryImage)
	{*

		var categoryDef = {
				"key": categoryKey,
				"text": categoryText,
				"image": categoryImage
				};
			
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var caregoriesJson = JSON.parse(this.categories);
		caregoriesJson.push(categoryDef)
		
		this.categories = JSON.stringify(caregoriesJson);
	*}

	/**
	 * Add an Error Notification
	 */
	void addErrorNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "ERROR", categoryKey, "");
	*}
			
	/**
	 * Add a Warning Notification
	 */
	void addWarningNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "WARNING", categoryKey, "");
	*}

	/**
	 * Add an Info Notification
	 */
	void addInfoNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "INFO", categoryKey, "");
	*}

	/**
	 * Add a Success Notification
	 */
	void addSuccessNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "SUCCESS", categoryKey, "");
	*}

	/** 
	 * Add Notification
	 * 
	 */
	void addNotification (
			/**Notification Text */String notificationText, 
			/**Notification Level (ERROR|WARNING|INFO|SUCCESS) */String notificationLevel, 
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey, 
			/**Optional: Notification Key */ optional String notificationKey)
	{*
		var itemDef = { 
				"category": categoryKey,
				"key": notificationKey, 
				"text": notificationText, 
				"level": notificationLevel
				};

		if (this.notifications === undefined || this.notifications === "" || this.notifications === "<delete>"){
			this.notifications = "[]";
		}
		
		var notificationsJson = JSON.parse(this.notifications);
		notificationsJson.push(itemDef)

		this.notifications = JSON.stringify(notificationsJson);
	*}
}

/**
 * Class for FallbackPicture
 */
class org.kalisz.karol.scn.pack.FallbackPicture extends Component {
	
	/**
	 * Setter for "normal case" picture
	 */
	void setPicture (
			/** picture */
			String pictureForNormalCase) {*
		this.picture = pictureForNormalCase;
	*}

	/**
	 * Setter for "fallback case" picture
	 */
	void setFallbackPicture (
			/** fallback picture */
			String pictureForFallbackCase) {*
		this.fallbackPicture = pictureForFallbackCase;
	*}
}


/**
 * Class for ImageCarousel
 */
class org.kalisz.karol.scn.pack.ImageCarousel extends Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef)
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	String setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

/**
 * Class for BasicBusinessCard
 */
class org.kalisz.karol.scn.pack.BasicBusinessCard extends Component {

	/** returns the image url */
	String getImage () {*
		return this.image;	
	*}
	
	/** sets the image url */
	String setImage (String imageUrl) {*
		this.image = imageUrl;	
	*}

	/** returns the name */
	String getName () {*
		return this.name;	
	*}
	
	/** sets the name */
	String setName (String name) {*
		this.name = name;	
	*}

	/** returns the title */
	String getTitle () {*
		return this.title;	
	*}
	
	/** sets the title */
	String setTitle (String title) {*
		this.title = title;	
	*}

/**
 * Class for FishEye
 */
class org.kalisz.karol.scn.pack.FishEye extends Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef)
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	String setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

class org.kalisz.karol.scn.pack.KeyLabelValue {
  String key;
  String label;
  float value;
  
  getValueAsString() {*
	  return "" + this.value;
  *}
}

class org.kalisz.karol.scn.pack.KeyLabelValueArray extends Array {
	org.kalisz.karol.scn.pack.KeyLabelValueArray (org.kalisz.karol.scn.pack.KeyLabelValue b);
}

/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the discussion thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/12/design-studio-sdk--get-topbottom-n-rankings-with-a-little-less-code
 * 
 * Authors: Michael Howles, Karol Kalisz
 */
class org.kalisz.karol.scn.pack.Collection extends Component {  
	
	org.kalisz.karol.scn.pack.KeyLabelValueArray getAsKeyLabelValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": items[i].key, 
				"label": items[i].label,
				"value": items[i].value
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}
	
	void setItems (
			/*keys*/ String keys, 
			/*labels*/ String labels, 
			/*values*/ String values,
			/*separator*/ optional String separator) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		var k = keys.split(separator);  
		var l = labels.split(separator);  
		var v = values.split(separator);
		
		while(k.length>l.length) l.push("");  
		while(k.length>v.length) v.push("0");

		for(var i=0; i<k.length; i++){
			var itemDef = {
				"key" : k[i],
				"label" : l[i],  
				"value" : v[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}  

	void addItem (
			/*key*/ String key, 
			/*label*/ String label, 
			/*value*/ String value) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		var itemDef = {
			"key" : key,
			"label" : label,  
			"value" : value
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}
	
	String getKeys(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);
		var a = [];
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].key);  
		}
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}
	
	String getLabels(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].label);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}
	
	String getValues(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	void sortByKey() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.key>b.key;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  
		
	void sortByKeyDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.key>a.key);  
		});  
		
		this.items = JSON.stringify(a);  
	*}
	
	void sortByLabel() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.label>b.label;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  
		
	void sortByLabelDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.label>a.label);  
		});  
		
		this.items = JSON.stringify(a);  
	*}
		
	void sortByValue() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newA-newB;  
		});
		
		this.items = JSON.stringify(a);  
	*}  
		
	void sortByValueDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newB-newA;  
		});
		
		this.items = JSON.stringify(a);  
	*}  
		
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  
		
	String getLabelByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "";
		
		if(a.length>index){  
			r = a[index].label;  
		}
		
		return r;  
	*}
	
	String getLabelByKey( 
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "";
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].label;
			}
		}
		
		return r;  
	*}
		
	String getValueByIndexAsString( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		if(a.length>index){  
			r = a[index].value;  
		}  
		
		return r;  
	*}  
		
	float getValueByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = 0.0;  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}
	
	String getValueByKeyAsString( 
			/* key */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
			}
		}
		
		return r;  
	*}  
		
	float getValueByKey(
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = 0.0;  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
			}
		}
		
		return r;  
	*}
}  