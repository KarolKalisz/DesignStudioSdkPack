/**
 * Copyright 2014 Karol Kalisz
 * 
 * Original Source Code Location:
 *  https://github.com/KarolKalisz/DesignStudioSdkPack
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

/**
 * Class for NotificationBar
 */
class org.kalisz.karol.scn.pack.NotificationBar extends Component {

	/** 
	 * Add Category
	 * 
	 */
	void addCategory (
			/**Category Key*/String categoryKey, 
			/**Category Text*/String categoryText, 
			/**Category Image*/String categoryImage)
	{*

		var categoryDef = {
				"key": categoryKey,
				"text": categoryText,
				"image": categoryImage
				};
			
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var caregoriesJson = JSON.parse(this.categories);
		caregoriesJson.push(categoryDef)
		
		this.categories = JSON.stringify(caregoriesJson);
	*}

	/**
	 * Add an Error Notification
	 */
	void addErrorNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "ERROR", categoryKey, "");
	*}
			
	/**
	 * Add a Warning Notification
	 */
	void addWarningNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "WARNING", categoryKey, "");
	*}

	/**
	 * Add an Info Notification
	 */
	void addInfoNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "INFO", categoryKey, "");
	*}

	/**
	 * Add a Success Notification
	 */
	void addSuccessNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "SUCCESS", categoryKey, "");
	*}

	/** 
	 * Add Notification
	 * 
	 */
	void addNotification (
			/**Notification Text */String notificationText, 
			/**Notification Level (ERROR|WARNING|INFO|SUCCESS) */String notificationLevel, 
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey, 
			/**Optional: Notification Key */ optional String notificationKey)
	{*
		var itemDef = { 
				"category": categoryKey,
				"key": notificationKey, 
				"text": notificationText, 
				"level": notificationLevel
				};

		if (this.notifications === undefined || this.notifications === "" || this.notifications === "<delete>"){
			this.notifications = "[]";
		}
		
		var notificationsJson = JSON.parse(this.notifications);
		notificationsJson.push(itemDef)

		this.notifications = JSON.stringify(notificationsJson);
	*}
}

/**
 * Class for FallbackPicture
 */
class org.kalisz.karol.scn.pack.FallbackPicture extends Component {
	
	/**
	 * Setter for "normal case" picture
	 */
	void setPicture (
			/** picture */
			String pictureForNormalCase) {*
		this.picture = pictureForNormalCase;
	*}

	/**
	 * Setter for "fallback case" picture
	 */
	void setFallbackPicture (
			/** fallback picture */
			String pictureForFallbackCase) {*
		this.fallbackPicture = pictureForFallbackCase;
	*}
}


/**
 * Class for ImageCarousel
 */
class org.kalisz.karol.scn.pack.ImageCarousel extends Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef)
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	String setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

/**
 * Class for BasicBusinessCard
 */
class org.kalisz.karol.scn.pack.BasicBusinessCard extends Component {

	/** returns the image url */
	String getImage () {*
		return this.image;	
	*}
	
	/** sets the image url */
	String setImage (String imageUrl) {*
		this.image = imageUrl;	
	*}

	/** returns the name */
	String getName () {*
		return this.name;	
	*}
	
	/** sets the name */
	String setName (String name) {*
		this.name = name;	
	*}

	/** returns the title */
	String getTitle () {*
		return this.title;	
	*}
	
	/** sets the title */
	String setTitle (String title) {*
		this.title = title;	
	*}

/**
 * Class for FishEye
 */
class org.kalisz.karol.scn.pack.FishEye extends Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element */
	void addElement (String elementKey, String elementText, String imageUrl) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef)
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	String setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}
}

class org.kalisz.karol.scn.pack.KpiView extends Component {
	
	/* Sets the header text. */
	void setHeaderText(/* Header text */ String text) {*
		this.headerText = text;
	*}	

	/* Returns the header text. */
	String getHeaderText() {*
		return this.headerText;
	*}

	/* Shows or hides the header. */
	void setHeaderVisible(/* If true, then the header is shown, else it is hidden */ boolean isHeaderVisible) {*
		this.headerVisible = isHeaderVisible;
	*}	

	/* Returns true if the header is shown, else false. */
	boolean isHeaderVisible() {*
		return this.headerVisible;
	*}

	/* Sets the header CSS class. */
	void setHeaderCssClass(/* Header CSS class */ String cssClass) {*
		this.headerCssClass = cssClass;
	*}	

	/* Returns the header CSS class. */
	String getHeaderCssClass() {*
		return this.headerCssClass;
	*}

	/* Sets the title text. */
	void setTitleText(/* Title text */ String text) {*
		this.titleText = text;
	*}	

	/* Returns the title text. */
	String getTitleText() {*
		return this.titleText;
	*}

	/* Sets the title CSS class. */
	void setTitleCssClass(/* Title CSS class */ String cssClass) {*
		this.titleCssClass = cssClass;
	*}	

	/* Returns the title CSS class. */
	String getTitleCssClass() {*
		return this.titleCssClass;
	*}

	/* Sets the value prefix text. */
	void setValuePrefixText(/* Value prefix text */ String text) {*
		this.valuePrefixText = text;
	*}	

	/* Returns the value prefix text. */
	String getValuePrefixText() {*
		return this.valuePrefixText;
	*}

	/* Sets the value prefix CSS class. */
	void setValuePrefixCssClass(/* Value prefix CSS class */ String cssClass) {*
		this.valuePrefixCssClass = cssClass;
	*}	

	/* Returns the value prefix CSS class. */
	String getValuePrefixCssClass() {*
		return this.valuePrefixCssClass;
	*}

	/* Sets the value text. */
	void setValueText(/* Value text */ String text) {*
		this.valueText = text;
	*}	

	/* Returns the value text. */
	String getValueText() {*
		return this.valueText;
	*}

	/* Sets the value CSS class. */
	void setValueCssClass(/* Value CSS class */ String cssClass) {*
		this.valueCssClass = cssClass;
	*}	

	/* Returns the current value CSS class. */
	String getValueCssClass() {*
		return this.valueCssClass;
	*}

	/* Sets the value decimal places. */
	void setValueDecimalPlaces(/* Number of decimal places */ int decimalPlaces) {*
		this.valueDecimalPlaces = decimalPlaces;
	*}

	/* Returns the value decimal places. */
	int getValueDecimalPlaces() {*
		return this.valueDecimalPlaces;
	*}

	/* Sets the value suffix text. */
	void setValueSuffixText(/* Value suffix text */ String text) {*
		this.valueSuffixText = text;
	*}	

	/* Returns the value suffix text. */
	String getValueSuffixText() {*
		return this.valueSuffixText;
	*}

	/* Sets the value suffix CSS class. */
	void setValueSuffixCssClass(/* Value suffix CSS class */ String cssClass) {*
		this.valueSuffixCssClass = cssClass;
	*}	

	/* Returns the value suffix CSS class. */
	String getValueSuffixCssClass() {*
		return this.valueSuffixCssClass;
	*}

	/* Sets the footer text. */
	void setFooterText(/* Footer text */ String text) {*
		this.footerText = text;
	*}	

	/* Returns the footer text. */
	String getFooterText() {*
		return this.footerText;
	*}

	/* Sets the footer CSS class. */
	void setFooterCssClass(/* Footer CSS class */ String cssClass) {*
		this.footerCssClass = cssClass;
	*}

	/* Returns the footer CSS class. */
	String getFooterCssClass() {*
		return this.footerCssClass;
	*}

	/* Sets the image URL. */
	void setImage(/* image url */ String image) {*
		this.image = image;
	*}

	/* Returns the image URL. */
	String getImage() {*
		return this.image;
	*}
	
	/* Sets the data cell whose value is displayed. */
	void setDataSelection(/* Data cell tha tcontains the value displayed */ ResultCellSelection cellSelection) {*
		this.data = this.stringifySelection(cellSelection);
	*}
}