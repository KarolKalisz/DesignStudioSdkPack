/**
 * Copyright 2014 Karol Kalisz
 * 
 * Original Source Code Location:
 *  https://github.com/KarolKalisz/DesignStudioSdkPack
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

class org.kalisz.karol.scn.date.DateObject extends Component {

	void initializeWithInternalDate(String internalDate) {*
		this.internalDate = internalDate;
	
		// the most primitive way to get integers from the internal date string
		var year = parseInt(internalDate.substring(0,4));
		
		var monthString = internalDate.substring(4,6);
		monthString = monthString.replace("0", "");
		var month = parseInt(monthString);
		
		var dayString = internalDate.substring(6,8);
		dayString = dayString.replace("0", "");
		var day = parseInt(dayString);
		
		this.initialize(year, month, day);
	*}
	
	void initialize(int year, int month, int day) {*
		this.year = year;
		this.month = month - 1;
		this.day = day;
		
		this.date = new Date();
		
		var that = this;
		
		// create a special initialization function for UTC time zone to avoid calculation inconsistences
			Date.prototype.createUtc = function (year, month0, day) {
				this.setUTCFullYear(year);
				this.setUTCMonth(month0);
				this.setUTCDate(day);
				this.setUTCHours(0);
				this.setUTCMinutes(0);
				this.setUTCSeconds(0);
				this.setUTCMilliseconds(0);
			}
		
		// create a recalculate function which calculates information not available in JS date
			Date.prototype.recalculate = function () {
				
				// exit if date did not changed
				var currentDate = that.date.toUTCString();
				if(currentDate == that.currentCalculatedDate) {
					return;
				}
				that.currentCalculatedDate = currentDate;
				
				if(!that.days) {
					that.days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];	
				}

				if(!that.months){
					that.months = ['January','February','March','April','May','June','July','August','September','October','November','December'];	
				}

				that.firstJanuaryDate = new Date();
				
				// unfortunately SDK (or Rhino) has problems with dynamic creation of methods, need to check here again 
					Date.prototype.createUtc = function (year, month0, day) {
						this.setUTCFullYear(year);
						this.setUTCMonth(month0);
						this.setUTCDate(day);
						this.setUTCHours(0);
						this.setUTCMinutes(0);
						this.setUTCSeconds(0);
						this.setUTCMilliseconds(0);
					}

				// create first january
				that.firstJanuaryDate.createUtc(that.getYear(), 0, 1);

				// what week day is first january? - need for ISO week calculation
				that.dayOfWeekFirstJanuary = that.firstJanuaryDate.getDay();
				// days are 0-based, starting Sunday // 0 Sun // 1 Mon // 2 Tue // 3 Wed // 4 Thu // 5 Fri // 6 Sat

				// what week day is today?
				that.dayOfWeekToday = that.getDayOfWeek();

				// substract until last monday
				that.lastMondayDate = new Date();
				that.lastMondayDate.createUtc(that.getYear(), that.getMonth() - 1, that.getDay());

				if(that.dayOfWeekToday > 1) { // Tue - Sat
					that.lastMondayDate.setDate(that.date.getDate() - (that.dayOfWeekToday - 1)); // substract day to catch Monday
				} else if(that.dayOfWeekToday < 1) { // Sun
					that.lastMondayDate.setDate(that.date.getDate() - 6); // substract day to catch Monday
				}

				// what week day is last Monday? - must be 1, just for debug
				that.dayOfWeekLastMonday = that.lastMondayDate.getDay();

				// calculate mondays before and after first january
				that.mondayBeforeFirstJanuaryDate = new Date();
				that.mondayBeforeFirstJanuaryDate.createUtc(that.firstJanuaryDate.getYear(), that.firstJanuaryDate.getMonth(), that.firstJanuaryDate.getDate());

				that.mondayAfterFirstJanuaryDate = new Date();
				that.mondayAfterFirstJanuaryDate.createUtc(that.firstJanuaryDate.getYear(), that.firstJanuaryDate.getMonth(), that.firstJanuaryDate.getDate());

				if(that.dayOfWeekFirstJanuary == 0) { // Sunday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 6);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 1);
				} else if(that.dayOfWeekFirstJanuary == 1) { // Monday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate());
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate());
				} else if(that.dayOfWeekFirstJanuary == 2) { // Tuesday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 1);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 6);
				} else if(that.dayOfWeekFirstJanuary == 3) { // Wednesday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 2);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 5);
				} else if(that.dayOfWeekFirstJanuary == 4) { // Thursday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 3);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 4);
				} else if(that.dayOfWeekFirstJanuary == 5) { // Friday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 4);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 3);
				} else if(that.dayOfWeekFirstJanuary == 6) { // Saturday
					that.mondayBeforeFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() - 5);
					that.mondayAfterFirstJanuaryDate.setDate(that.firstJanuaryDate.getDate() + 2);
				}

				// now we can count also day number in this year
				var milisecondsInADay = 60*60*24*1000;
				that.daysFromFirstJanuary = ((that.date - that.firstJanuaryDate) / milisecondsInADay) + 1;

				// count days between last monday and the mondays around first january
				that.daysFromLastMondayToMondayBeforeFirstJanuary = ((that.lastMondayDate - that.mondayBeforeFirstJanuaryDate) / milisecondsInADay);
				that.daysFromLastMondayToMondayAfterFirstJanuary = ((that.lastMondayDate - that.mondayAfterFirstJanuaryDate) / milisecondsInADay);

				// ISO conform cal week, if january first is thursday, friday, saturday or sunday -> weeks are counted from next monday.
				// count number of weeks, by substracting the mondays and dividing by 7
				if(that.dayOfWeekFirstJanuary >= 4 || that.dayOfWeekFirstJanuary == 0) {
					that.calendarWeek = (that.daysFromLastMondayToMondayAfterFirstJanuary / 7) + 1;
				} else {
					that.calendarWeek = (that.daysFromLastMondayToMondayBeforeFirstJanuary / 7) + 1;
				}

				// for now simplification, actually last year could have 53 calendar weeks by ISO 8601
				if(that.calendarWeek == 0) {
					that.calendarWeek = 52;
				}
				
				// for now names only in EN
				that.dayOfWeekName = that.days [that.getDayOfWeek()];
				that.monthName = that.months [that.getMonth()];
				
				// quarter
				that.quarter = Math.ceil(that.getMonth() / 3);
			}

		this.date.createUtc(this.year, this.month, this.day);
		this.date.recalculate();	
	*}
	
	void rollDays(int days) {*
		this.internal_initializeNow();
	
		this.date.setUTCDate(this.date.getUTCDate() + days);
	*}
	
	void rollWeeks(int weeks) {*
		this.internal_initializeNow();
		
		this.date.setUTCDate(this.date.getUTCDate() + (weeks*7));
	*}

	void rollMonths(int months) {*
		this.internal_initializeNow();

		this.date.setUTCMonth(this.date.getUTCMonth() + months);
	*}

	void rollYears(int years) {*
		this.internal_initializeNow();

		this.date.setUTCFullYear(this.date.getUTCFullYear() + years);
	*}

	String toLocaleString() {*
		this.internal_initializeNow();

		return this.date.toLocaleString() ; 
	*}
	
	String toUTCString() {*
		this.internal_initializeNow();

		return this.date.toUTCString() ; 
	*}

	int getDay() {*
		this.internal_initializeNow();

		return this.date.getUTCDate();
	*}

	int getDayName() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return this.dayOfWeekName;
	*}

	int getDayOfWeek() {*
		this.internal_initializeNow();

		return this.date.getUTCDay();
	*}

	int getDayOfYear() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return this.daysFromFirstJanuary;
	*}

	int getCalendarWeek() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return this.calendarWeek;
	*}

	/**
	 * Month, 1-index based (1-12)
	 */
	int getMonth() {*
		this.internal_initializeNow();

		return this.date.getUTCMonth() + 1;
	*}

	int getMonthName() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return this.monthName;
	*}
	
	int getQuarter() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return this.quarter;
	*}
	
	int getYear() {*
		this.internal_initializeNow();

		return this.date.getUTCFullYear();
	*}

	String getTimezoneOffset() {*
		this.internal_initializeNow();

		return this.date.getTimezoneOffset();
	*}
	
	String format(String formatPattern) {*
		this.internal_initializeNow();
	
		this.date.recalculate();

		var resultString = formatPattern;
		resultString = resultString.replace("YYYY", this.getYear());
		resultString = resultString.replace("YY", this.getYear() % 100);
		
		if(this.getMonth() < 10) {
			resultString = resultString.replace("MM", "0" + this.getMonth());	
			resultString = resultString.replace("M", this.getMonth());
		} else {
			resultString = resultString.replace("MM", this.getMonth());
		}
		
		if(this.getDay() < 10) {
			resultString = resultString.replace("DD", "0" + this.getDay());
			resultString = resultString.replace("D", this.getDay());
		} else {
			resultString = resultString.replace("DD", this.getDay());
		}
		
		if(this.getCalendarWeek() < 10) {
			resultString = resultString.replace("WW", "0" + this.getCalendarWeek());
			resultString = resultString.replace("W", this.getCalendarWeek());
		} else {
			resultString = resultString.replace("WW", this.getCalendarWeek());
		}
		
		resultString = resultString.replace("QQQ", "00" + this.getQuarter());
		resultString = resultString.replace("QQ", "0" + this.getQuarter());
		resultString = resultString.replace("Q", this.getQuarter());

		return resultString;
	*}
	
	String internal_toString() {*
		this.internal_initializeNow();

		this.date.recalculate();
	
		return "Todays Date: " + this.date.toUTCString() + "\n"
		 + "Last Monday Date: " + this.lastMondayDate.toUTCString() + "\n\n"
		 + "First January Date: " + this.firstJanuaryDate.toUTCString() + "\n"
		 + "Monday Before First January Date: " + this.mondayBeforeFirstJanuaryDate.toUTCString() + "\n"
		 + "Monday After First January Date: " + this.mondayAfterFirstJanuaryDate.toUTCString() + "\n\n"
		 + "Today Day: " + this.dayOfWeekToday + "\n"
		 + "First January Day: " + this.dayOfWeekFirstJanuary + "\n"
		 + "Last Monday Day: " + this.lastMondayDate.getDay() + "\n\n"
		 + "Date Serialization: " + this.date + "\n"
		 + "Monday Before First January Serialization: " + this.mondayBeforeFirstJanuaryDate + "\n"
		 + "Monday After First January Serialization: " + this.mondayAfterFirstJanuaryDate + "\n"
		 + "daysFromLastMondayToMondayBeforeFirstJanuary: " + this.daysFromLastMondayToMondayBeforeFirstJanuary + "\n"
		 + "daysFromLastMondayToMondayAfterFirstJanuary: " + this.daysFromLastMondayToMondayAfterFirstJanuary + "\n\n"
		 + "Day of Year: " + this.getDayOfYear() + "\n"
		 + "Day of Month: " + this.getDay() + "\n\n"
		 + "Day of Week: " + this.getDayOfWeek() + "\n"
		 + "Calendar Week: " + this.getCalendarWeek() + "\n"
		 + "Month: " + this.getMonth() + "\n"
		 + "Quarter: " + this.getQuarter() + "\n"
		 + "Year: " + this.getYear() + "\n"
		 + "TimeZoneOffset: " + this.getTimezoneOffset() + "\n"
		 + "Day Name: " + this.getDayName() + "\n"
		 + "Month Name: " + this.getMonthName() + "\n"
		 + "Formatted: " + this.getDay() + "." + this.getMonth() + "." + this.getYear() + "\n"
		 + "Formatted [DD.MM.YYYY WW]: " + this.format("DD.MM.YYYY WW") + "\n"
		 + "Formatted [MM/DD/YYYY WW]: " + this.format("MM/DD/YYYY WW") + "\n\n"
		 + "Internal Year: " + this.year + "\n"
		 + "Internal Month: " + this.month + "\n"
		 + "Internal Day: " + this.day + "\n"
		 + "Internal Date: " + this.internalDate + "\n"
		 + "";
	*}
	
	void internal_initializeNow() {*
		if(!this.date) {
			APPLICATION.createWarningMessage("Date Object Not Initialized. Initializing with some date. Use 'initialize' call next time.");

			this.date = new Date();
			
			this.initialize(this.date.getUTCFullYear(),  this.date.getUTCMonth() + 1, this.date.getUTCDay());
			
			this.date.recalculate();
		}
	*}
}
